@page "/purchase"
@using IMS.UseCases.Activity.Interfaces


@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

@rendermode InteractiveServer



<h3>Purchase Inventory</h3>

<EditForm Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="HandleItemSelected"></AutoCompleteComponent>
                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                }

            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>

@code {

    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();
    private Inventory? inventory;

    private List<AutoCompleteComponent.ItemViewModel>? SearchInventory(string name)
    {
        var list =  ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list is null)
        {
            return null;
        }

        return list.Select(d => new AutoCompleteComponent.ItemViewModel { Id = d.InventoryId, Name = d.InventoryName }).ToList();
    }

    private async Task HandleItemSelected(AutoCompleteComponent.ItemViewModel model)
    {
        this.purchaseViewModel.InventoryId = model.Id;
        inventory = await ViewInventoryByIdUseCase.ExecuteAsync(model.Id);
        this.purchaseViewModel.InventoryPrice = inventory.Price;
    }

    private async Task Purchase()
    {
        if (inventory is null)
        {
            return;
        }
        await PurchaseInventoryUseCase.ExecuteAsync(this.purchaseViewModel.PONumber, inventory, this.purchaseViewModel.QuantityToPurchase, "James");
        this.purchaseViewModel = new PurchaseViewModel();
        this.inventory = null;
    }

}
