@inject IDeleteInventoryUseCase DeleteInventoryUseCase
@inject NavigationManager NavigationManager

@if (this.Inventory is not null)
{
    <tr>
        <td>
            @Inventory.InventoryName
        </td>
        <td>
            @Inventory.Quantity
        </td>
        <td>
            @Inventory.Price.ToString("c")
        </td>
        <td>
            <a type="button" class="btn btn-light" href="/editinventory/@Inventory.InventoryId">
                Edit
            </a>
        </td>
        <td>
            <EditForm Enhance="true" Model="Inventory" FormName="@($"form-delete-inventory-{Inventory.InventoryId}")" OnSubmit="() => DeleteInventory(Inventory.InventoryId)">
                <button type="submit" class="btn btn-light">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code
{
    [Parameter]
    public Inventory? Inventory { get; set; }

    private async Task DeleteInventory(int inventoryId)
    {
        await DeleteInventoryUseCase.ExecuteAsync(inventoryId);
        NavigationManager.Refresh();
    }
}
